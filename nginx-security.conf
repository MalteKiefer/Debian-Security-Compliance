# NGINX Security Configuration
# Debian Optimized - Enterprise Grade  
# Mitigates CVE-2024-32760, CVE-2024-24990, CVE-2024-31079
# Compliance: CIS Level 1/2, ISO 27001, SOC 2, BSI Grundschutz

# Main Context Security Settings
user www-data;
worker_processes auto;
worker_rlimit_nofile 65535;

# Error log with appropriate level
error_log /var/log/nginx/error.log warn;

# PID file
pid /run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 15;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Security: Hide nginx version
    server_tokens off;
    
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Rate Limiting Zones
    limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=global:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;
    
    # Buffer security settings
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # SSL/TLS Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # DH parameters (generate with: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048)
    ssl_dhparam /etc/ssl/certs/dhparam.pem;
    
    # HTTP/3 QUIC - DISABLED for security (CVE-2024-32760, CVE-2024-24990)
    # DO NOT enable until upgrading to NGINX 1.27.4+
    # http3 off;
    # quic off;
    
    # Security Headers Map
    map $scheme $hsts_header {
        https   "max-age=63072000; includeSubDomains; preload";
    }
    
    # Logging Format for Security Analysis
    log_format security_log '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '"$http_x_forwarded_for" $request_time '
                           '$upstream_response_time $request_length';
    
    # Block common attack patterns
    map $http_user_agent $blocked_user_agent {
        default 0;
        ~*(nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan) 1;
        ~*(libwww-perl|python|curl|wget|winhttp|HTTrack|clshttp|loader) 1;
        "" 1;
    }
    
    # Geographic blocking (customize as needed)
    # geo $blocked_country {
    #     default 0;
    #     include /etc/nginx/blocked_countries.conf;
    # }
    
    # Default server block (catch-all)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        return 444;  # Drop connection
    }
    
    # Main server configuration template
    server {
        listen 80;
        listen [::]:80;
        server_name example.com www.example.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name example.com www.example.com;
        
        root /var/www/html;
        index index.html index.htm index.php;
        
        # SSL Certificate paths (update with your certificates)
        ssl_certificate /path/to/ssl/certificate.pem;
        ssl_certificate_key /path/to/ssl/private.key;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        add_header Strict-Transport-Security $hsts_header always;
        
        # Remove server identification
        more_clear_headers Server;
        more_set_headers "Server: SecureWeb";
        
        # Rate limiting
        limit_req zone=global burst=20 nodelay;
        limit_conn conn_limit_per_ip 20;
        limit_conn conn_limit_per_server 1000;
        
        # Block malicious user agents
        if ($blocked_user_agent) {
            return 403;
        }
        
        # Security locations
        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }
        
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        
        # Deny access to hidden files and directories
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Deny access to backup and temporary files
        location ~* \.(bak|backup|old|orig|save|swp|tmp|~)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Deny access to configuration files
        location ~* \.(conf|config|cfg|ini|log)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Protect version control directories
        location ~ /\.(git|hg|svn|cvs)/ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Protect specific files
        location ~* /(readme|license|changelog|install|todo)(\.(txt|md))?$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # PHP-specific security (if using PHP)
        location ~ \.php$ {
            # Basic PHP security
            try_files $uri =404;
            
            # Rate limiting for login pages
            location ~ ^/(wp-admin|admin|login|signin).*\.php$ {
                limit_req zone=login burst=5 nodelay;
                include fastcgi_params;
                fastcgi_pass unix:/run/php/php8.1-fpm.sock;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            }
            
            include fastcgi_params;
            fastcgi_pass unix:/run/php/php8.1-fpm.sock;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param HTTPS $https if_not_empty;
            
            # Security parameters for PHP-FPM
            fastcgi_hide_header X-Powered-By;
            fastcgi_read_timeout 300;
            fastcgi_buffer_size 128k;
            fastcgi_buffers 4 256k;
            fastcgi_busy_buffers_size 256k;
        }
        
        # Static file handling with security
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|ttf|woff|woff2)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff always;
            access_log off;
            
            # Prevent hotlinking
            valid_referers none blocked server_names;
            if ($invalid_referer) {
                return 403;
            }
        }
        
        # API endpoint protection
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            # CORS headers (customize as needed)
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            try_files $uri $uri/ =404;
        }
        
        # Admin area protection
        location /admin/ {
            # IP whitelist (customize with your admin IPs)
            allow 192.168.1.0/24;
            allow 10.0.0.0/8;
            deny all;
            
            auth_basic "Admin Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            limit_req zone=login burst=3 nodelay;
            
            try_files $uri $uri/ =404;
        }
        
        # WordPress specific security (if applicable)
        location ~ ^/wp-content/uploads/.*\.php$ {
            deny all;
        }
        
        location ~ ^/wp-includes/.*\.php$ {
            deny all;
        }
        
        location ~ ^/wp-admin/install\.php$ {
            deny all;
        }
        
        # Default location with security
        location / {
            try_files $uri $uri/ =404;
            
            # Block SQL injection attempts
            if ($args ~* "(\<|%3C).*script.*(\>|%3E)") { return 403; }
            if ($args ~* "(union|select|insert|drop|delete|update|replace|truncate)") { return 403; }
            if ($args ~* "(\.\./|\.\.\\|\.\.%2F|\.\.%5C)") { return 403; }
            
            # Block XSS attempts
            if ($args ~* "(<|%3C)([^s]*s)+cript.*(>|%3E)") { return 403; }
            if ($args ~* "(<|%3C)([^e]*e)+mbed.*(>|%3E)") { return 403; }
            if ($args ~* "(<|%3C)([^o]*o)+bject.*(>|%3E)") { return 403; }
        }
        
        # Custom error pages
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 /error.html;
        error_page 500 501 502 503 504 505 506 507 508 510 511 /error.html;
        
        location = /error.html {
            root /var/www/error;
            internal;
        }
        
        # Logging
        access_log /var/log/nginx/access.log security_log;
        error_log /var/log/nginx/error.log warn;
    }
}

# Additional security considerations:
# 1. Generate DH parameters: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
# 2. Create htpasswd file for admin access: htpasswd -c /etc/nginx/.htpasswd admin
# 3. Install nginx-extras package for additional modules like headers-more
# 4. Configure fail2ban with nginx filters
# 5. Set up proper SSL certificates (Let's Encrypt recommended)
# 6. Regular security updates - ensure NGINX version 1.27.4+ for HTTP/3 safety